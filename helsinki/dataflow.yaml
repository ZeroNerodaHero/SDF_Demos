# Perform word count on sentences in non windowed transformation

apiVersion: 0.4.0
meta:
  name: helsinki-stat
  version: 0.1.0
  namespace: examples

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  # VP is the vehicle position
  vp:
    type: object
    properties:
      vehicle:
        type: i32
      tst:
        type: string
      speed:
        type: f64
      lat:
        type: f64
      long:
        type: f64
      route:
        type: string
      accel:
        type: f64
  bus-stat:
    type: object
    properties:
      vehicle:
        type: string
      accel: 
        type: f64
      speed: 
        type: f64
      count:  
        type: u32
  bus-stat-list:
    type: list
    items:
      type: bus-stat

#########################################################
topics:
  helsinki:
    schema:
      value:
        type: vp
  helsinki-subset:
    schema:
      value:
        type: vp
  cumulate-accel:
    schema:
      value:
        type: bus-stat-list

#########################################################
services:
  easymap:
    sources:
      - type: topic
        id: helsinki
    
    transforms:
      - operator: filter
        run: |
          fn subset_helsinki(pos: Vp) -> Result<bool ,String> {
            Ok(pos.vehicle < 300)
          }
    
    sinks:
      - type: topic
        id: helsinki-subset

  cumulate-speed-acc:
    sources:
      - type: topic
        id: helsinki-subset
    states:
      cumulate-speed-acc:
        type: keyed-state
        properties:
          key: 
            type: string
          value:
            type: arrow-row
            properties:
              count: 
                type: u32
              accel: 
                type: f64
              speed:
                type: f64
            
    window:
      tumbling:
        duration: 5s
      assign-timestamp:
        run: |
          fn assign_event_timestamp(bus: Vp, event_time: i64) -> Result<i64, String>{
            Ok(event_time)
          }
      partition:
        assign-key:
          run: |
            fn key_by_id(bus: Vp) -> Result<String,String> {
              Ok(bus.vehicle.to_string())
            }
        update-state:
          run: | 
            fn update_speed_acc(bus: Vp) -> Result<(), String> {
              let mut bus_stat = cumulate_speed_acc();
              bus_stat.count +=1;
              bus_stat.accel += bus.accel;
              bus_stat.speed += bus.speed;
              bus_stat.update();
              Ok(())
            }
      flush:
        run: |
          fn export_stats() -> Result<BusStatList, String> {
            let mut blist = cumulate_speed_acc().clone();
            Ok(blist.iter().map(|entry|
              BusStat{
                vehicle: "test".to_string(),
                accel: entry.value.accel,
                speed: 0.0,
                count: 0,
              }
            ).collect())
          }
    sinks:
      - type: topic
        id: cumulate-accel
